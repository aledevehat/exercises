"running sutherland exercise";
// input is an elliptic curve, output true/false is it supersingular? using A. Sutherland algorithm

E0 := EllipticCurve([0,1]);
E1 := EllipticCurve([1,0]);

// step from one curve to the next without back tracking
iso_step:= function(p,g, ji, jin)
  Fp:=Parent(ji);
  R<x>:= PolynomialRing(Fp);
  result:= true;
  f:=R!Evaluate(g,[ji,x]); 
      fn:= f div (x - jin); 
      jin := ji; 
      roots := Roots(fn);
      if #roots gt 0 then ji:= roots[1][1]; 
      else 
        result := false;
        end if;
  return result, ji, jin;
end function;

sutherland_alg:=function(E,p)
  // set base field
  Fp:= GF(p,2);
  R<x>:=PolynomialRing(Fp);

  result:= true;
  j:= R!jInvariant(E);
  if not j in Fp then result:= false; end if;
  g := ClassicalModularPolynomial(2);
  f:=R!Evaluate(g,[j,x]);
  // check if there are three roots, if not, curve ordinary
  roots2:=Roots(f);
  roots2_mult:=0;
  for s in roots2 do
    roots2_mult+:= s[2];
  end for;
  if roots2_mult lt 3 then 
    result:=false; 
    break;
  else
    // place roots in list according to multiplicity 
    roots:=[];
    for s in roots2 do
      if s[2] eq 1 then roots cat:= [s[1]]; end if;
      if s[2] eq 2 then roots cat:= [s[1] , s[1]]; end if;
      if s[2] eq 3 then roots cat:= [s[1] , s[1], s[1]]; end if;
    end for;

    j1:=roots[1]; j2:=roots[2]; j3:= roots[3];
    j1n:= j; j2n:=j; j3n:=j;
    // step through three paths in the graph, one starting at each root, w/o back tracking, checking for leaves as you go
    m:= Floor(Log(2,p))+1;
    for i := 1 to m do
      check1,j1,j1n:= iso_step(p,g,j1,j1n);
      check2,j2,j2n:= iso_step(p,g,j2,j2n);
      check3,j3,j3n:= iso_step(p,g,j3,j3n);
      
      if not (check1 and check2 and check3) then break; end if;
      
    end for;
  end if;
  return result;
end function;

testing:= function(E,p)
  " ";
  Fp:= GF(p,2);
  R<x>:=PolynomialRing(Fp);
  "Is curve s.s.?";
  "Sutherland alg says: "; sutherland_alg(E,p);
  "Magma says: "; IsSupersingular(ChangeRing(E, Fp));
  return " ";
end function;

